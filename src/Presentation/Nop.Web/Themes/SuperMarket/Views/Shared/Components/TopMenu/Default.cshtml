@model TopMenuModel

@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Topics

@functions {
    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {
        <li>
            <a href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">
                <span>@lineModel.Category.Name</span>
                @if (lineModel.Category.NumberOfProducts.HasValue)
                {
                    <text> </text>

                    @T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                }
            </a>
            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                //responsive (all categories)
                lineModel.Category.SubCategories :
                //standard design (only categories with "IncludeInTopMenu")
                lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    <i class="sublist-toggle fa-solid fa-angle-right"></i>
                    <ul class="sublist @levelClass">
                        @foreach (var subCategory in subCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = subCategory,
                        Level = lineModel.Level + 1,
                        ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                    };
                            await CategoryLine(categoryLineModel);
                        }
                    </ul>
                }
            }
        </li>
    }
}

<div class="desktop-menu">
    <div class="dropdown">
        <div class="dropdown-toggle" id="menu-dropdown" data-toggle="dropdown" aria-expanded="false">
            <div class="menu-title"><i class="fa-solid fa-bars"></i><span>Main Categories</span></div>
        </div>
        <div class="menu-drawer dropdown-menu"  aria-labelledby="menu-dropdown">
            <ul class="top-menu notmobile">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
                @if (Model.DisplayHomepageMenuItem)
                {
                    <li><a href="@Url.RouteUrl("Homepage")"><span>@T("Homepage")</span></a></li>
                }
                @if (!Model.UseAjaxMenu)
                {
                    var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
                    @foreach (var category in rootCategories)
                    {
                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
                        await CategoryLine(categoryLineModel);
                    }

                }
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
            </ul>
        </div>
    </div>
</div>

<ul class="top-menu notmobile">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
    @if (Model.DisplayHomepageMenuItem)
    {
        <li><a href="@Url.RouteUrl("Homepage")"><span>@T("Homepage")</span></a></li>
    }
    @if (!Model.UseAjaxMenu)
    {
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
        @foreach (var category in rootCategories)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
            {
                Category = category
            };
            await CategoryLine(categoryLineModel);
        }
    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
</ul>

@{
    var rootCategoriesResponsive = Model.Categories.ToList();

    <div class="mobile-nav">
        <div class="top">
             @await Component.InvokeAsync(typeof(LogoViewComponent))
            <i class="fa-solid fa-circle-xmark menu-nav-toggle"></i>        
        </div>
        <ul class="top-menu mobile">
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore, additionalData = Model })
            @if (Model.DisplayHomepageMenuItem)
            {
                <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
            }
            @if (!Model.UseAjaxMenu)
            {
                @foreach (var category in rootCategoriesResponsive)
                {
                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category,
                        ResponsiveMobileMenu = true
                    };
                    await CategoryLine(categoryLineModel);
                }

            }
            @foreach (var topic in Model.Topics)
            {
                <li><a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
            }
            @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
            {
                <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
            }
            @if (Model.DisplayProductSearchMenuItem)
            {
                <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
            }
            @if (Model.DisplayCustomerInfoMenuItem)
            {
                <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
            }
            @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
            {
                <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
            }
            @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
            {
                <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
            }
            @if (Model.DisplayContactUsMenuItem)
            {
                <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
            }
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter, additionalData = Model })
        </ul>
    </div>
    @if (Model.UseAjaxMenu)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                var localized_data = {
                    AjaxFailure: "@T("MainMenu.AjaxFailure")"
                };
                mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
            });
        </script>

        <script src="~/js/public.menu.js" asp-location="Footer"></script>

    }
    else
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                $('.top-menu.mobile .sublist-toggle').on('click', function () {
                    $(this).siblings('.sublist').slideToggle('slow');
                });
            });
        </script>

    }

    <script asp-location="Footer">
        $(document).ready(function () {
            $('.menu-nav-toggle').on('click', function () {
                $(".header-menu").toggleClass("nav-active");
                $("body").toggleClass("scroll-disabled");
            });
        });
    </script>
}
